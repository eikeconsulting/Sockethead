@using Sockethead.Razor.Grid;
@model IQueryable<Sockethead.Web.Areas.Samples.Controllers.Movie>

@(await Html
    .SimpleGrid(Model)

    .AddColumn(column => column
        .For(model => model.Name)
        .Sortable()
        .AddCssStyle("width:21%"))

    .AddColumn(column => column
        .For(model => model.Director)
        .Sortable()
        .AddCssStyle("width:21%"))

    .AddColumn(column => column
        .Label("Genre")
        .DisplayAs(model => model.Genre.ToUpper())
        .LinkTo(model => "https://www.google.com", target: "_blank")
        .SortableBy(model => model.Genre)
        .AddCssStyle("width:21%")
        .AddCssStyle("font-weight:bold"))

    .AddColumn(column => column
        .Label("Name not Encoded")
        .DisplayAs(model => model.Name)
        .Encoded(false)
        .AddCssStyle("width:21%"))

    .AddColumnFor(model => model.Released)

    .AddCssClass("table-striped")
    .AddCssClass("table-sm")

    .DefaultSortBy(model => model.Name, SortOrder.Ascending)

    .AddSearch(
        name: "Name and Director",
        searchFilter: (source, query) =>
        {
            return source.Where(model =>
                model.Name.Contains(query, StringComparison.OrdinalIgnoreCase) ||
                (model.Director != null && model.Director.Contains(query, StringComparison.OrdinalIgnoreCase)));
        })

    .AddSearch(
        name: "Genre",
        searchFilter: (source, query) =>
        {
            query = query.Trim();
            return source.Where(model => model.Genre.Contains(query, StringComparison.OrdinalIgnoreCase));
        })

    .SetOptions(options =>
    {
        options.MaxRows = 1000;
    })

    .AddPager(options =>
    {
        options.RowsPerPage = 5;
        options.DisplayPagerTop = true;
        options.DisplayPagerBottom = true;
    })

    .RenderAsync()
)
