@model IQueryable<Movie>


<h4>Form</h4>
<form method="post">
    @(await Html
    .SimpleGrid(Model)
    .AddColumn(col => col
        .DisplayAs(model => $"<input name='Names' type='checkbox' value='{model.Name}' />")
        .Encoded(false))
    .AddColumnsFromModel()
    .RenderAsync()
)
    <button class="btn btn-primary">Submit</button>
</form>

<br />


@(await Html
    .SimpleGrid(Model)
    .AddColumnsFromModel()
    .AddColumn(column => column
        .Header("TwoColumnGrid in a SimpleGrid!")
        .Encoded(false)
        .DisplayAs(model => Html
            .TwoColumnGrid()
            .Add(model)
            .RenderToString()))
    .AddSearch("Blah", searchFilter: (source, query) => source.Where(movie => movie.Name.Contains(query, StringComparison.OrdinalIgnoreCase)))
    .AddSearch("Boom", searchFilter: (source, query) => source.Where(movie => movie.Name.Contains(query, StringComparison.OrdinalIgnoreCase)))
    .AddPager(options => options.RowsPerPage = 3)
    .RenderAsync()
)

<hr />

@(await Html
    .SimpleGrid(Model)
    .AddColumnsFromModel()
    .AddColumn(column => column
        .Header("TwoColumnGrid in a SimpleGrid!")
        //.TwoColumnGrid((model, grid) => grid.Add(model))
        .TwoColumnGrid(model => model))

    .AddSearch("Blah", searchFilter: (source, query) => source.Where(movie => movie.Name.Contains(query, StringComparison.OrdinalIgnoreCase)))
    .AddSearch("Boom", searchFilter: (source, query) => source.Where(movie => movie.Name.Contains(query, StringComparison.OrdinalIgnoreCase)))
    .AddPager(options => options.RowsPerPage = 3)
    .RenderAsync()
)

<hr />

@(await Html
    .SimpleGrid(Model)
    .AddColumnsFromModel()
    .AddColumn(column => column
        .Header("This inside itself")
        .SimpleGrid(model => Model.Take(5), grid => grid
            .AddColumnFor(model => model.Name)
            .AddColumnFor(model => model.Director)
            ))

    .AddPager(options => options.RowsPerPage = 3)
    .AddCssClass("table-striped")
    .RenderAsync()
)

<hr />

@(await Html
    .SimpleGrid(Model.Take(2))
    .AddColumnFor(model => model.Name)
    .AddColumn(column =>  column
        .Header("TwoColumnGrid")
        .Encoded(false)
        .DisplayAs(model => Html
            .TwoColumnGrid()
            .Add("Name 1", model.Name)
            .Add(model)
            .Add(
                label: $"List of all movies inside the movie {model.Name}",
                value: Html.SimpleGrid(Model.Take(4))
                    .AddColumnFor(model => model.Name)
                    .AddColumnFor(model => model.Genre)
                    .AddColumnFor(model => model.Director)
                    .RenderToString(),
                encode: false)
            .RenderToString()))
    .RenderAsync()
)

<hr />

@(Html
    .SimpleGrid(Model.Take(2))
    .AddColumnFor(model => model.Name)
    .AddColumnForTwoColumnGrid(column =>  column.Header("TwoColumnGrid"), 
        (gridBuilder, model) => 
            gridBuilder
                .Add("Name 1", model.Name)
                .Add(model)
                .AddSimpleGrid(
                    label: $"List of all movies inside the movie {model.Name}",
                    model: Model.Take(4),
                    gridBuilder: grid => grid
                        .AddColumnFor(model => model.Name)
                        .AddColumnFor(model => model.Genre)
                        .AddColumnFor(model => model.Director)))
    .Render())