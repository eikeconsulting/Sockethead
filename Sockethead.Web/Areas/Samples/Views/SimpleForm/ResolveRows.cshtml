@using Sockethead.Razor.Forms
@model UserProfile

<div class="row">
    <div class="col-md-6">
        @(await Html
            .SimpleForm(Model)
            .AddRowFor(model => model.UserId)
            .AddRowFor(model => model.First)
            .AddRowFor(model => model.Last)
            .AddRowFor(model => model.JobTitle)
            .AddRowFor(model => model.IsAdmin)
            .RenderAsync())
    </div>
    <div class="col-md-6">
        <h4>Razor</h4>
        <pre><code>@@(await Html
    .SimpleForm(Model)
    .AddRowFor(model => model.UserId)
    .AddRowFor(model => model.First)
    .AddRowFor(model => model.Last)
    .AddRowFor(model => model.JobTitle)
    .AddRowFor(model => model.IsAdmin)
    .RenderAsync())</code></pre>
        <p>
            Here we take the same model, but add Attributes to the model properties to control how the form is rendered.
            Note that these are ASP.Net built in Attributes you from the <code>System.ComponentModel.DataAnnotations</code> namespace.
            <br/><br/>
            Now, rather than adding rows for the specific types, we simply call "AddRowFor" and SimpleModel will render
            the correct row type based on the Model's property typse and the Attributes applied.  
            We'll cover details of which row types are supported and how they are solved later.
        </p>
        <br>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <h4>Model</h4>
        <pre><code>public class UserProfile
{
   [HiddenInput] public Guid UserId { get; set; } = Guid.NewGuid();

   [DisplayName("First Name")]
   [Display(Prompt = "Enter first name")]
   [Required(ErrorMessage = "We need a first name here")]
   [MaxLength(20, ErrorMessage = "First name is too long...")]
   public string First { get; set; } = "John";

   [Display(Name = "Last Name", Prompt = "Enter last name")]
   [MaxLength(20)]
   public string Last { get; set; } = "Doe";

   [Display(Name = "Job Title", Prompt = "Enter job title")] public string JobTitle { get; set; }

   [DisplayName("Administrator")] public bool IsAdmin { get; set; }
}</code></pre>
    </div>
    <div class="col-md-6">
        <h4>Controller</h4>
        <pre><code>[HttpGet] 
public IActionResult ResolveRows() => 
    View(model: new UserProfile());</code></pre>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}