@model FileUploadViewModel

<div class="row">
    <div class="col-md-5">
        @(await Html
            .SimpleForm(Model)
            
            /*
            .AddFileUploadRowFor(model => model.ImageFile,
                multiple: false,
                accept: "image/*")
            
            .AddFileUploadRowFor(model => model.MultipleTextFiles, 
                multiple: true, 
                accept: "text/*")
            */
               .AppendHtml(
                   @<div class="form-group form-row">
                       <div class="custom-file">
                           2
                       @Html.LabelFor(model => model.ImageFile, new {@class = "control-label "})
                       @Html.EditorFor(model => model.ImageFile, additionalViewData: new {@class = "form-control"})
                       </div>
                       <input type="file" class="form-control" id="customFile"/>
                   </div>
                )
            
            .AddSubmitButton("Upload")
            .RenderAsync())
        
        @if (ViewBag.Image != null)
        {
            <hr/>
            <h4>Uploaded Image</h4>
            <img src="@ViewBag.Image" alt="Uploaded Image" class="img-fluid img-thumbnail"/>
        }
        
    </div>
    <div class="col-md-7">
        <pre><code>@@(await Html
    .SimpleForm(Model)
    .FileUploadEditorFor(model => model.File)
    .FileUploadEditorFor(model => model.MultipleFiles, multiple: true,
        accept: "image/*")
    .SubmitButton("Upload")
    .RenderAsync())
        </code></pre>
        <p>
            The FileUploadEditorFor method will create a file upload input for the specified property.
            You can also optionally pass the accept, multiple and isDisabled parameters to the method to control the behavior of the input.
        </p>

<partial name="_ResultJson"/>        
        
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
