@using Sockethead.Razor.Forms
@model UserProfile

<div class="row">
    <div class="col-md-6">
        @(await Html
            .SimpleForm(Model)
            .AddHiddenFor(model => model.UserId)
            .AddTextBoxRowFor(model => model.First)
            .AddTextBoxRowFor(model => model.Last)
            .AddTextBoxRowFor(model => model.JobTitle)
            .AddCheckBoxRowFor(model => model.IsAdmin)
            .RenderAsync())
    </div>
    <div class="col-md-6">
        <h4>Razor</h4>
        <pre><code>@@(await Html
    .SimpleForm(Model)
    .AddHiddenFor(model => model.UserId)
    .AddTextBoxRowFor(model => model.First)
    .AddTextBoxRowFor(model => model.Last)
    .AddTextBoxRowFor(model => model.JobTitle)
    .AddCheckBoxRowFor(model => model.IsAdmin)
    .RenderAsync())</code></pre>
        <p>
        SimpleForm can quickly create a form from a data model.
        Here we see you can specify the specific row types you want to use for each property in your model.
        Each the row is similar to the Html.TextBoxFor() helper, but includes the label and error message
        in addition to the input control. 
        <br/><br/>
        Note that this form does not contain a submit button, we'll cover that later.
        </p>
        <br>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <h4>Model</h4>
        <pre><code>public class UserProfile
{
   public Guid UserId { get; set; } = Guid.NewGuid();

   public string First { get; set; } = "John";

   public string Last { get; set; } = "Doe";

   public string JobTitle { get; set; }

   public bool IsAdmin { get; set; }
}</code></pre>
    </div>
    <div class="col-md-6">
        <h4>Controller</h4>
        <pre><code>[HttpGet] 
public IActionResult BasicUsage() => View(new UserProfile());</code></pre>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
