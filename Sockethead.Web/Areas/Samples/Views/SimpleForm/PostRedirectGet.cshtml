@using Sockethead.Razor.Forms
@model UserProfile

<div class="row">
    <div class="col-md-6">
        @(await Html
            .SimpleForm(Model)
            .AddRowsForModel()
            .AddSubmitButton("Save Changes")
            .RenderAsync())
    </div>
    <div class="col-md-6">
        <h4>Razor</h4>
        <pre><code>@@(await Html
    .AddRowsForModel()
    .AddSubmitButtonRow("Save Changes")
    .RenderAsync())</code></pre>
        <p>
        </p>
        This page demonstrates the Post-Redirect-Get (PRG) pattern which prevents the form from getting reposted
        when the user refreshes the page.  This is accomplished by redirecting to the Get method after the Post method.
        <br/><br/>
        We add Controller Action attributes on the Get and Post methods to restore and save the ModelState.
        Then we make sure to always redirect to the Get method after the Post method completes.  The SaveModelState 
        attribute will serialize the Model data to TempData and then RestoreModelState attribute will
        deserialize it to restore the ModelState across the redirect.
    </div>
</div>

<hr/>

<div class="row">
    <div class="col-md-12">
        <h4>Controller</h4>
        <pre><code>[HttpGet]
[RestoreModelState]
public IActionResult PostRedirectGet() => View(new UserProfile()));

[HttpPost]
[ValidateAntiForgeryToken]
[SaveModelState]
public IActionResult PostRedirectGet(UserProfile formData)
{
    return RedirectToAction(actionName: nameof(PostRedirectGet))
        .Success($"Successfully submitted form data.");        
}</code></pre>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
